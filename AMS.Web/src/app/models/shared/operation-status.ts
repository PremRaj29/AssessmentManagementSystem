import { Message } from './message';
import { AffectedId } from './affected-id';

export class OperationStatus
{
    // ----------------------------------------
    // IMPORTANT
    // ----------------------------------------
    //
    // The OperationStatus object is initialized at the beginning of each service request with useful flags and data that must be returned with the request.  
    // If a different instance of OperationStatus needs to be returned by the request, please observe the following requirements.
    //
    // The following properties must be copied from the initialized instance to the replacement instance:
    //
    // 1) RequestProcessed 
    // 2) ServiceName
    // 3) ServiceMethod
    // 4) RequestSuccessful
    // 5) All messages generated by the service's logic should be consolidated / included in the instance returned to the caller.

    // ----------------------------------------
    // constructor
    // ----------------------------------------
    constructor()
    {
        // init lists to help avoid issues related to null reference exceptions
        this.Messages = new Array<Message>();
        this.AffectedIds = new Array<AffectedId>();

        // default to unprocessed status; associated business logic will need to reset when processing
        this.RequestProcessed = false;

        // default to failed status; associated business logic will need to reset on success
        this.RequestSuccessful = false;
    }

    //#region Class Properties

    /// <summary>
    /// Name of service called by the client.  See service documentation for available services.
    /// </summary>
    ServiceName: string;

    /// <summary>
    /// Type of operation.  Typically GET, POST, DELETE.  See service documentation for operations supported.
    /// </summary>
    ServiceMethod: string;

    /// <summary>
    /// True if the associated BatchAction was processed.  False if the BatchAction was skipped. <br />
    /// Does not indicate Success; see RequestSuccessful property. <br />
    /// Current behavior: if a BatchAction fails, all subsequent BatchActions in that BatchActionList are skipped / not processed. <br />
    /// </summary>
    RequestProcessed: boolean;

    /// <summary>
    /// For typical service operations: True if request was successfully processed, otherwise false.<br />
    /// For validation service operations: True if validation passed the designated test, otherwise false.<br />
    /// Naming convention for validation services: V[ObjectNameHere][ValidationDescHere]<br />
    /// Examples of validation service names:<br />
    /// - VExposuresMinPayroll<br />
    /// - VUserPoliciesValidPolicyCode<br />
    /// </summary>
    RequestSuccessful: boolean;

    /// <summary>
    /// Messages returned by the service
    /// </summary>
    Messages: Array<Message>;

    /// <summary>
    /// List of IDs affected by the operation.  Contains the Name, ID, and Operation (POST, DELETE) of the inserted, updated, or deleted row.
    /// </summary>
    AffectedIds: Array<AffectedId>;

    /// <summary>
    /// For Internal use by the Insurance Service only.  Read-only identifier of the primary record associated with the request.  Captured in event logging.  (e.g. - for Questions GET requests, this would be the QuoteID value.)
    /// </summary>
    RecordKey: number;

    //#endregion
}